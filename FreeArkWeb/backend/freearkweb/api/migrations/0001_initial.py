# Generated by Django 5.2.7 on 2025-10-27 14:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UsageQuantityDaily',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specific_part', models.CharField(max_length=20, verbose_name='专有部分')),
                ('building', models.CharField(max_length=10, verbose_name='楼栋')),
                ('unit', models.CharField(max_length=10, verbose_name='单元')),
                ('room_number', models.CharField(max_length=10, verbose_name='房号')),
                ('energy_mode', models.CharField(choices=[('制冷', '制冷'), ('制热', '制热')], max_length=10, verbose_name='供能模式')),
                ('initial_energy', models.IntegerField(verbose_name='初期能耗(kWh)')),
                ('final_energy', models.IntegerField(verbose_name='末期能耗(kWh)')),
                ('usage_quantity', models.IntegerField(verbose_name='使用量(kWh)')),
                ('time_period', models.DateField(verbose_name='时间段')),
            ],
            options={
                'verbose_name': '每日用量数据',
                'verbose_name_plural': '每日用量数据',
                'db_table': 'usage_quantity_daily',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', '管理员'), ('user', '普通用户')], default='user', max_length=20)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('position', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='customuser_groups', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PLCData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specific_part', models.CharField(db_index=True, default='', max_length=20, verbose_name='专有部分')),
                ('plc_ip', models.CharField(blank=True, db_index=True, max_length=50, null=True, verbose_name='PLC IP地址')),
                ('building', models.CharField(db_index=True, default='', max_length=10, verbose_name='楼栋')),
                ('unit', models.CharField(db_index=True, default='', max_length=10, verbose_name='单元')),
                ('room_number', models.CharField(db_index=True, default='', max_length=10, verbose_name='房号')),
                ('energy_mode', models.CharField(db_index=True, default='未知', max_length=100, verbose_name='功能模式')),
                ('value', models.BigIntegerField(blank=True, null=True, verbose_name='参数值')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': 'PLC数据',
                'verbose_name_plural': 'PLC数据',
                'db_table': 'plc_data',
                'indexes': [models.Index(fields=['specific_part', 'energy_mode', 'created_at'], name='plc_data_specifi_e37ff2_idx'), models.Index(fields=['plc_ip', 'created_at'], name='plc_data_plc_ip_01fd3e_idx'), models.Index(fields=['building', 'unit', 'room_number'], name='plc_data_buildin_050e14_idx')],
            },
        ),
    ]
