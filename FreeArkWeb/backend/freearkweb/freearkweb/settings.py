"""
Django settings for freearkweb project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# 尝试加载环境变量
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # 如果没有python_dotenv模块，继续运行
    print("Warning: python_dotenv module not found, using environment variables directly")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-i%ixus$z-threi-#e&(th%w$a4zi+oq=)-jz&)y!m((g#!iype'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'freearkweb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'freearkweb.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# 数据库配置 - 强制使用MySQL，不依赖环境变量覆盖
# 即使环境变量中设置了其他数据库引擎，这里也会强制使用MySQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 强制使用MySQL引擎
        'NAME': 'freeark',  # 强制使用指定的数据库名
        'USER': 'root',  # 强制使用指定的用户名
        'PASSWORD': 'root',  # 强制使用指定的密码
        'HOST': '192.168.31.97',  # 根据start_services.bat中的配置使用正确的主机地址
        'PORT': '3306',  # 强制使用指定的端口
        'OPTIONS': {
            'charset': 'utf8mb4',
            'use_unicode': True,
        },
    }
}

# 输出数据库配置信息用于调试
print(f"数据库配置信息:")
print(f"- 数据库引擎: {DATABASES['default']['ENGINE']}")
print(f"- 数据库名称: {DATABASES['default']['NAME']}")
print(f"- 数据库主机: {DATABASES['default']['HOST']}:{DATABASES['default']['PORT']}")
print(f"- 数据库用户: {DATABASES['default']['USER']}")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS配置
CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:8080,http://127.0.0.1:8080').split(',')
CORS_ALLOW_CREDENTIALS = True

# 自定义用户模型配置
AUTH_USER_MODEL = 'api.CustomUser'

# REST Framework配置
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# 静态文件配置
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# 日志配置 - 最基本配置
import os
import logging

# 确保使用绝对路径
LOG_DIR = 'C:/Users/yanggyan/TRAE/FreeArk/logs'
LOG_FILE = os.path.join(LOG_DIR, 'django.log')

# 打印调试信息
print(f"配置日志目录: {LOG_DIR}")
print(f"配置日志文件: {LOG_FILE}")

# 确保目录存在
if not os.path.exists(LOG_DIR):
    try:
        os.makedirs(LOG_DIR)
        print(f"创建日志目录成功: {LOG_DIR}")
    except Exception as e:
        print(f"创建日志目录失败: {str(e)}")

# 直接使用Python logging模块创建并测试日志器
try:
    # 创建一个简单的logger
    test_logger = logging.getLogger('test_logger')
    test_logger.setLevel(logging.DEBUG)
    
    # 创建一个文件处理器
    file_handler = logging.FileHandler(LOG_FILE, mode='a', encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    
    # 创建一个格式化器
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    
    # 添加处理器到logger
    test_logger.addHandler(file_handler)
    
    # 写入测试日志
    test_logger.info("这是直接使用Python logging模块写入的测试日志")
    test_logger.debug("这是一条调试日志")
    print(f"直接使用Python logging模块写入日志成功: {LOG_FILE}")
    
    # 关闭处理器
    file_handler.close()
    
except Exception as e:
    print(f"直接使用Python logging模块写入日志失败: {str(e)}")

# Django日志配置 - 最简单的配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOG_FILE,
            'formatter': 'default',
            'encoding': 'utf-8',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'DEBUG',
    },
}
